{
  "openapi": "3.1.0",
  "info": {
    "title": "Tech Compass API",
    "description": "API for Tech Compass",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "OAuth2 compatible token login, get an access token for future requests.\nUses external auth server if enabled, otherwise allows any credentials for development.",
        "operationId": "login_api_auth_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_api_auth_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/solutions/": {
      "post": {
        "tags": [
          "solutions"
        ],
        "summary": "Create Solution",
        "description": "Create a new solution.",
        "operationId": "create_solution_api_solutions__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolutionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solution"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "solutions"
        ],
        "summary": "Get Solutions",
        "description": "Get all solutions with pagination, filtering and sorting.\n\nQuery Parameters:\n- category: Filter by category name\n- department: Filter by department name\n- team: Filter by team name\n- recommend_status: Filter by recommendation status (BUY/HOLD/SELL)\n- radar_status: Filter by radar status (ADOPT/TRIAL/ASSESS/HOLD)\n- stage: Filter by stage (DEVELOPING/UAT/PRODUCTION/DEPRECATED/RETIRED)\n- sort: Sort field (name, category, created_at, updated_at). Prefix with - for descending order",
        "operationId": "get_solutions_api_solutions__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "department",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Department"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Team"
            }
          },
          {
            "name": "recommend_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by recommendation status (BUY/HOLD/SELL)",
              "title": "Recommend Status"
            },
            "description": "Filter by recommendation status (BUY/HOLD/SELL)"
          },
          {
            "name": "radar_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by radar status (ADOPT/TRIAL/ASSESS/HOLD)",
              "title": "Radar Status"
            },
            "description": "Filter by radar status (ADOPT/TRIAL/ASSESS/HOLD)"
          },
          {
            "name": "stage",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by stage (DEVELOPING/UAT/PRODUCTION/DEPRECATED/RETIRED)",
              "title": "Stage"
            },
            "description": "Filter by stage (DEVELOPING/UAT/PRODUCTION/DEPRECATED/RETIRED)"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field (prefix with - for descending order)",
              "default": "name",
              "title": "Sort"
            },
            "description": "Sort field (prefix with - for descending order)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Solutions Api Solutions  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/solutions/departments": {
      "get": {
        "tags": [
          "solutions",
          "solutions"
        ],
        "summary": "Get Departments",
        "description": "Get all unique department names from solutions.\n\nReturns:\n- items: List of unique department names\n- total: Total number of unique departments",
        "operationId": "get_departments_api_solutions_departments_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Departments Api Solutions Departments Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/solutions/{slug}": {
      "get": {
        "tags": [
          "solutions"
        ],
        "summary": "Get Solution",
        "description": "Get a specific solution by slug.",
        "operationId": "get_solution_api_solutions__slug__get",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solution"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "solutions"
        ],
        "summary": "Update Solution",
        "description": "Update a solution by slug.",
        "operationId": "update_solution_api_solutions__slug__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolutionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solution"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "solutions"
        ],
        "summary": "Delete Solution",
        "description": "Delete a solution by slug.",
        "operationId": "delete_solution_api_solutions__slug__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags/": {
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create Tag",
        "description": "Create a new tag.",
        "operationId": "create_tag_api_tags__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get Tags",
        "description": "Get all tags with pagination.",
        "operationId": "get_tags_api_tags__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Tags Api Tags  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags/{name}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get Tag",
        "description": "Get a specific tag by name.",
        "operationId": "get_tag_api_tags__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Update Tag",
        "description": "Update a tag by name. If tag name is changed, all tagged solutions will be updated.",
        "operationId": "update_tag_api_tags__name__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Delete Tag",
        "description": "Delete a tag by name. Will return 400 error if tag is being used by any solutions.",
        "operationId": "delete_tag_api_tags__name__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags/solution/{solution_slug}": {
      "get": {
        "tags": [
          "tags",
          "tags"
        ],
        "summary": "Get Solution Tags",
        "description": "Get all tags for a specific solution.",
        "operationId": "get_solution_tags_api_tags_solution__solution_slug__get",
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Get Solution Tags Api Tags Solution  Solution Slug  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tags/solution/{solution_slug}/tag/{tag_name}": {
      "post": {
        "tags": [
          "tags",
          "tags"
        ],
        "summary": "Add Solution Tag",
        "description": "Add a tag to a solution. Creates the tag if it doesn't exist.",
        "operationId": "add_solution_tag_api_tags_solution__solution_slug__tag__tag_name__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Add Solution Tag Api Tags Solution  Solution Slug  Tag  Tag Name  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tags",
          "tags"
        ],
        "summary": "Delete Solution Tag",
        "description": "Remove a tag from a solution.",
        "operationId": "delete_solution_tag_api_tags_solution__solution_slug__tag__tag_name__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Delete Solution Tag Api Tags Solution  Solution Slug  Tag  Tag Name  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "description": "Create a new user.",
        "operationId": "create_user_api_users__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users",
        "description": "Get all users with pagination.",
        "operationId": "get_users_api_users__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Users Api Users  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Read User Me",
        "description": "Get current user.",
        "operationId": "read_user_me_api_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/users/{username}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User",
        "description": "Get a specific user by username.",
        "operationId": "get_user_api_users__username__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User",
        "description": "Update a user by username.",
        "operationId": "update_user_api_users__username__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "Delete a user by username.",
        "operationId": "delete_user_api_users__username__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/": {
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Create Category",
        "description": "Create a new category.",
        "operationId": "create_category_api_categories__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get Categories",
        "description": "Get all categories with pagination.",
        "operationId": "get_categories_api_categories__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Categories Api Categories  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{name}": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Get Category",
        "description": "Get a specific category by name.",
        "operationId": "get_category_api_categories__name__get",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "categories"
        ],
        "summary": "Update Category",
        "description": "Update a category by name.",
        "operationId": "update_category_api_categories__name__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "categories"
        ],
        "summary": "Delete Category",
        "description": "Delete a category by name. Will return 400 error if category is being used by any solutions.",
        "operationId": "delete_category_api_categories__name__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ratings/solution/{solution_slug}": {
      "get": {
        "tags": [
          "ratings",
          "ratings"
        ],
        "summary": "Get Solution Ratings",
        "description": "Get all ratings for a solution with pagination and sorting.\n\n- **solution_slug**: Unique identifier of the solution\n- **page**: Page number for pagination\n- **page_size**: Number of ratings per page\n- **sort_by**: Field to sort by (created_at or score)",
        "operationId": "get_solution_ratings_api_ratings_solution__solution_slug__get",
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(created_at|score)$",
              "default": "created_at",
              "title": "Sort By"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Solution Ratings Api Ratings Solution  Solution Slug  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ratings",
          "ratings"
        ],
        "summary": "Create Or Update Rating",
        "description": "Create or update a rating for a solution.\n\n- **solution_slug**: Unique identifier of the solution\n- **rating**: Rating details including score and optional comment",
        "operationId": "create_or_update_rating_api_ratings_solution__solution_slug__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Or Update Rating Api Ratings Solution  Solution Slug  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ratings/solution/{solution_slug}/me": {
      "get": {
        "tags": [
          "ratings",
          "ratings"
        ],
        "summary": "Get User Rating",
        "description": "Get the current user's rating for a solution.\n\n- **solution_slug**: Unique identifier of the solution",
        "operationId": "get_user_rating_api_ratings_solution__solution_slug__me_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get User Rating Api Ratings Solution  Solution Slug  Me Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ratings/solution/{solution_slug}/summary": {
      "get": {
        "tags": [
          "ratings",
          "ratings"
        ],
        "summary": "Get Solution Rating Summary",
        "description": "Get rating summary statistics for a solution.\n\nReturns:\n- average: Average rating score\n- count: Total number of ratings\n- distribution: Count of ratings for each score (1-5)",
        "operationId": "get_solution_rating_summary_api_ratings_solution__solution_slug__summary_get",
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Solution Rating Summary Api Ratings Solution  Solution Slug  Summary Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ratings/": {
      "get": {
        "tags": [
          "ratings",
          "ratings"
        ],
        "summary": "Get All Ratings",
        "description": "Get all ratings with pagination and sorting.\nDefault sort is by created_at in descending order (newest first).\n\n- **page**: Page number for pagination\n- **page_size**: Number of ratings per page\n- **sort**: Field to sort by (created_at, updated_at, score). Prefix with - for descending order",
        "operationId": "get_all_ratings_api_ratings__get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field (prefix with - for descending order)",
              "default": "-created_at",
              "title": "Sort"
            },
            "description": "Sort field (prefix with - for descending order)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get All Ratings Api Ratings  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/comments/solution/{solution_slug}": {
      "get": {
        "tags": [
          "comments",
          "comments"
        ],
        "summary": "Get Solution Comments",
        "description": "Get all comments for a solution with pagination and sorting.\nComments are sorted by created_at in descending order (newest first).\n\n- **solution_slug**: Unique identifier of the solution\n- **page**: Page number for pagination\n- **page_size**: Number of comments per page\n- **sort_by**: Field to sort by (currently only supports created_at)",
        "operationId": "get_solution_comments_api_comments_solution__solution_slug__get",
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(created_at)$",
              "default": "created_at",
              "title": "Sort By"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Solution Comments Api Comments Solution  Solution Slug  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "comments",
          "comments"
        ],
        "summary": "Create Comment",
        "description": "Create a new comment for a solution.\n\n- **solution_slug**: Unique identifier of the solution\n- **comment**: Comment details including content",
        "operationId": "create_comment_api_comments_solution__solution_slug__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Comment Api Comments Solution  Solution Slug  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/comments/solution/{solution_slug}/comment/{comment_id}": {
      "put": {
        "tags": [
          "comments",
          "comments"
        ],
        "summary": "Update Comment",
        "description": "Update a comment's content.\n\n- **solution_slug**: Unique identifier of the solution\n- **comment_id**: Unique identifier of the comment\n- **comment**: Updated comment content",
        "operationId": "update_comment_api_comments_solution__solution_slug__comment__comment_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Comment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Comment Api Comments Solution  Solution Slug  Comment  Comment Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "comments",
          "comments"
        ],
        "summary": "Delete Comment",
        "description": "Delete a comment.\n\n- **solution_slug**: Unique identifier of the solution\n- **comment_id**: Unique identifier of the comment",
        "operationId": "delete_comment_api_comments_solution__solution_slug__comment__comment_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "solution_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solution Slug"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Comment Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/comments/": {
      "get": {
        "tags": [
          "comments",
          "comments"
        ],
        "summary": "Get All Comments",
        "description": "Get all comments with pagination and sorting.\nDefault sort is by created_at in descending order (newest first).\n\n- **page**: Page number for pagination\n- **page_size**: Number of comments per page\n- **sort**: Field to sort by (created_at). Prefix with - for descending order",
        "operationId": "get_all_comments_api_comments__get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Page Size"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field (prefix with - for descending order)",
              "default": "-created_at",
              "title": "Sort"
            },
            "description": "Sort field (prefix with - for descending order)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get All Comments Api Comments  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/site-config": {
      "get": {
        "tags": [
          "site-config",
          "site-config"
        ],
        "summary": "Get Site Config",
        "description": "Get the current site configuration.\nThis endpoint is public and does not require authentication.",
        "operationId": "get_site_config_api_site_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Site Config Api Site Config Get"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "site-config",
          "site-config"
        ],
        "summary": "Update Site Config",
        "description": "Update site configuration.\nRequires authentication. Only updates the fields that are provided.",
        "operationId": "update_site_config_api_site_config_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteConfigUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Site Config Api Site Config Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "site-config",
          "site-config"
        ],
        "summary": "Create Site Config",
        "description": "Create initial site configuration.\nRequires authentication. Can only be called once when no configuration exists.",
        "operationId": "create_site_config_api_site_config_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteConfigBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Create Site Config Api Site Config Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/site-config/reset": {
      "post": {
        "tags": [
          "site-config",
          "site-config"
        ],
        "summary": "Reset Site Config",
        "description": "Reset site configuration to default values.\nRequires authentication. This will delete the existing configuration and create a new one with defaults.",
        "operationId": "reset_site_config_api_site_config_reset_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Reset Site Config Api Site Config Reset Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login_api_auth_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_api_auth_login_post"
      },
      "Category": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Category name (spaces will be trimmed)"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Category description"
          },
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": " Id",
            "description": "MongoDB ObjectId"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "Username who created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By",
            "description": "Username who last updated"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "Category",
        "description": "Category model for API responses"
      },
      "CategoryCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Category name (spaces will be trimmed)"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Category description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "CategoryCreate",
        "description": "Category creation model"
      },
      "CategoryUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Category name (spaces will be trimmed)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Category description"
          }
        },
        "type": "object",
        "title": "CategoryUpdate",
        "description": "Category update model"
      },
      "CommentCreate": {
        "properties": {
          "content": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Content",
            "description": "Comment content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "CommentCreate",
        "description": "Model for creating a comment"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "RatingCreate": {
        "properties": {
          "score": {
            "type": "integer",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Score",
            "description": "Rating score between 1 and 5"
          },
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Comment",
            "description": "Optional comment for the rating"
          }
        },
        "type": "object",
        "required": [
          "score"
        ],
        "title": "RatingCreate"
      },
      "SiteConfigBase": {
        "properties": {
          "site_name": {
            "type": "string",
            "title": "Site Name",
            "description": "Name of the site"
          },
          "site_description": {
            "type": "string",
            "title": "Site Description",
            "description": "Description of the site"
          },
          "welcome_message": {
            "type": "string",
            "title": "Welcome Message",
            "description": "Welcome message shown on homepage"
          },
          "contact_email": {
            "type": "string",
            "title": "Contact Email",
            "description": "Contact email for support"
          },
          "features": {
            "type": "object",
            "title": "Features",
            "description": "Feature flags for enabling/disabling functionality"
          },
          "custom_links": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Custom Links",
            "description": "Custom navigation links"
          },
          "theme": {
            "type": "object",
            "title": "Theme",
            "description": "Theme configuration including colors and layout"
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "description": "Meta information for SEO"
          }
        },
        "type": "object",
        "required": [
          "site_name",
          "site_description",
          "welcome_message",
          "contact_email"
        ],
        "title": "SiteConfigBase",
        "description": "Base model for site configuration"
      },
      "SiteConfigUpdate": {
        "properties": {
          "site_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Site Name"
          },
          "site_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Site Description"
          },
          "welcome_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Welcome Message"
          },
          "contact_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contact Email"
          },
          "features": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Features"
          },
          "custom_links": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Links"
          },
          "theme": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Theme"
          },
          "meta": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          }
        },
        "type": "object",
        "title": "SiteConfigUpdate",
        "description": "Model for updating site configuration"
      },
      "Solution": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Solution name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Detailed description"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Primary category"
          },
          "radar_status": {
            "type": "string",
            "enum": [
              "ADOPT",
              "TRIAL",
              "ASSESS",
              "HOLD"
            ],
            "title": "Radar Status",
            "description": "Tech Radar status (ADOPT/TRIAL/ASSESS/HOLD)"
          },
          "department": {
            "type": "string",
            "title": "Department",
            "description": "Department name"
          },
          "team": {
            "type": "string",
            "title": "Team",
            "description": "Team name"
          },
          "team_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Email",
            "description": "Team contact email"
          },
          "maintainer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Id",
            "description": "ID of the maintainer"
          },
          "maintainer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Name",
            "description": "Name of the maintainer"
          },
          "maintainer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Email",
            "description": "Email of the maintainer"
          },
          "official_website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Official Website",
            "description": "Official website URL"
          },
          "documentation_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentation Url",
            "description": "Documentation URL"
          },
          "demo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demo Url",
            "description": "Demo/POC URL"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Current version"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tag names"
          },
          "pros": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pros",
            "description": "List of advantages"
          },
          "cons": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cons",
            "description": "List of disadvantages"
          },
          "stage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "DEVELOPING",
                  "UAT",
                  "PRODUCTION",
                  "DEPRECATED",
                  "RETIRED"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Stage",
            "description": "Development stage status"
          },
          "recommend_status": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BUY",
                  "HOLD",
                  "SELL"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Recommend Status",
            "description": "Strategic recommendation (BUY/HOLD/SELL)"
          },
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": " Id",
            "description": "MongoDB ObjectId"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "URL-friendly identifier (auto-generated)"
          },
          "category_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[0-9a-fA-F]{24}$",
                "description": "MongoDB ObjectId"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category Id",
            "description": "Reference to category"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "Username who created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By",
            "description": "Username who last updated"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "radar_status",
          "department",
          "team",
          "slug"
        ],
        "title": "Solution",
        "description": "Solution model for API responses"
      },
      "SolutionCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Solution name"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Detailed description"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category",
            "description": "Primary category"
          },
          "radar_status": {
            "type": "string",
            "enum": [
              "ADOPT",
              "TRIAL",
              "ASSESS",
              "HOLD"
            ],
            "title": "Radar Status",
            "description": "Tech Radar status (ADOPT/TRIAL/ASSESS/HOLD)"
          },
          "department": {
            "type": "string",
            "title": "Department",
            "description": "Department name"
          },
          "team": {
            "type": "string",
            "title": "Team",
            "description": "Team name"
          },
          "team_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Email",
            "description": "Team contact email"
          },
          "maintainer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Id",
            "description": "ID of the maintainer"
          },
          "maintainer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Name",
            "description": "Name of the maintainer"
          },
          "maintainer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Email",
            "description": "Email of the maintainer"
          },
          "official_website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Official Website",
            "description": "Official website URL"
          },
          "documentation_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentation Url",
            "description": "Documentation URL"
          },
          "demo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demo Url",
            "description": "Demo/POC URL"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version",
            "description": "Current version"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of tag names"
          },
          "pros": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pros",
            "description": "List of advantages"
          },
          "cons": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cons",
            "description": "List of disadvantages"
          },
          "stage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "DEVELOPING",
                  "UAT",
                  "PRODUCTION",
                  "DEPRECATED",
                  "RETIRED"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Stage",
            "description": "Development stage status"
          },
          "recommend_status": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BUY",
                  "HOLD",
                  "SELL"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Recommend Status",
            "description": "Strategic recommendation (BUY/HOLD/SELL)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "radar_status",
          "department",
          "team"
        ],
        "title": "SolutionCreate",
        "description": "Solution creation model"
      },
      "SolutionUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "radar_status": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "ADOPT",
                  "TRIAL",
                  "ASSESS",
                  "HOLD"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Radar Status"
          },
          "department": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Department"
          },
          "team": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team"
          },
          "team_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Team Email"
          },
          "maintainer_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Id"
          },
          "maintainer_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Name"
          },
          "maintainer_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maintainer Email"
          },
          "official_website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Official Website"
          },
          "documentation_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentation Url"
          },
          "demo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demo Url"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "pros": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pros"
          },
          "cons": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cons"
          },
          "stage": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "DEVELOPING",
                  "UAT",
                  "PRODUCTION",
                  "DEPRECATED",
                  "RETIRED"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Stage"
          },
          "recommend_status": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "BUY",
                  "HOLD",
                  "SELL"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Recommend Status"
          }
        },
        "type": "object",
        "title": "SolutionUpdate",
        "description": "Solution update model"
      },
      "Tag": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Tag name (will be formatted to lowercase with hyphens)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Tag description"
          },
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": " Id",
            "description": "MongoDB ObjectId"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "Username who created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By",
            "description": "Username who last updated"
          },
          "usage_count": {
            "type": "integer",
            "title": "Usage Count",
            "description": "Number of solutions using this tag",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Tag",
        "description": "API response model for tag"
      },
      "TagCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Tag name (will be formatted to lowercase with hyphens)"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Tag description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TagCreate",
        "description": "Model for creating a new tag"
      },
      "TagUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "TagUpdate",
        "description": "Model for updating an existing tag"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token",
        "description": "Token response model."
      },
      "User": {
        "properties": {
          "_id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": " Id",
            "description": "MongoDB ObjectId"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username for login"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name",
            "description": "User's full name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the user is active",
            "default": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser",
            "description": "Whether the user is a superuser",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By",
            "description": "Username who created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "updated_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated By",
            "description": "Username who last updated"
          }
        },
        "type": "object",
        "required": [
          "email",
          "username",
          "full_name"
        ],
        "title": "User",
        "description": "User model for API responses - excludes password fields"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "description": "User's email address"
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "Username for login"
          },
          "full_name": {
            "type": "string",
            "title": "Full Name",
            "description": "User's full name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the user is active",
            "default": true
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser",
            "description": "Whether the user is a superuser",
            "default": false
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "User's password (will be hashed)"
          }
        },
        "type": "object",
        "required": [
          "email",
          "username",
          "full_name",
          "password"
        ],
        "title": "UserCreate",
        "description": "User creation model"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "User update model"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/auth/login"
          }
        }
      }
    }
  }
}